{"version":3,"sources":["tree.js"],"names":["createTree","value","data","children","parent","addChild","node","newNode","push","travel","tree","fn","i","length","removeNode","sibling","index","splice","node2","console","log"],"mappings":"AAAA,IAAIA,UAAU,GAAG,SAAbA,UAAa,CAAAC,KAAK,EAAG;AACrB,SAAO;AACHC,IAAAA,IAAI,EAACD,KADF;AAEHE,IAAAA,QAAQ,EAAC,IAFN;AAGHC,IAAAA,MAAM,EAAC;AAHJ,GAAP;AAKH,CAND;;AAQA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAAOL,KAAP,EAAe;AAC5B,MAAMM,OAAO,GAAE;AACXL,IAAAA,IAAI,EAACD,KADM;AAEXE,IAAAA,QAAQ,EAAC,IAFE;AAGXC,IAAAA,MAAM,EAACE;AAHI,GAAf;AAKDA,EAAAA,IAAI,CAACH,QAAL,GAAgBG,IAAI,CAACH,QAAL,IAAiB,EAAjC,CAN6B,CAMM;;AACnCG,EAAAA,IAAI,CAACH,QAAL,CAAcK,IAAd,CAAmBD,OAAnB;AACA,SAAOA,OAAP;AACF,CATD;;AAWA,IAAME,MAAM,GAAG,SAATA,MAAS,CAACC,IAAD,EAAMC,EAAN,EAAW;AACtBA,EAAAA,EAAE,CAACD,IAAD,CAAF;;AACA,MAAG,CAACA,IAAI,CAACP,QAAT,EACA;AACI;AACH;;AACD,OAAI,IAAIS,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACF,IAAI,CAACP,QAAL,CAAcU,MAA5B,EAAmCD,CAAC,EAApC,EACA;AACIH,IAAAA,MAAM,CAACC,IAAI,CAACP,QAAL,CAAcS,CAAd,CAAD,EAAkBD,EAAlB,CAAN;AACH;AACJ,CAVD;;AAYA,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAACJ,IAAD,EAAMJ,IAAN,EAAe;AAC9B,MAAMS,OAAO,GAAGT,IAAI,CAACF,MAAL,CAAYD,QAA5B;AACA,MAAIa,KAAK,GAAG,CAAZ;;AACA,OAAI,IAAIJ,CAAC,GAAI,CAAb,EAAeA,CAAC,GAACG,OAAO,CAACF,MAAzB,EAAgCD,CAAC,EAAjC,EACA;AACI,QAAGG,OAAO,CAACH,CAAD,CAAP,KAAaN,IAAhB,EACAU,KAAK,GAAGJ,CAAR;AACH;;AACDG,EAAAA,OAAO,CAACE,MAAR,CAAeD,KAAf,EAAqB,CAArB;AACH,CATD;;AAWA,IAAMN,IAAI,GAAGV,UAAU,CAAC,EAAD,CAAvB;AACAK,QAAQ,CAACK,IAAD,EAAM,EAAN,CAAR;AACA,IAAMQ,KAAK,GAACb,QAAQ,CAACK,IAAD,EAAM,EAAN,CAApB;AACAL,QAAQ,CAACK,IAAD,EAAM,EAAN,CAAR;AACAL,QAAQ,CAACK,IAAD,EAAM,EAAN,CAAR;AACAL,QAAQ,CAACK,IAAD,EAAM,EAAN,CAAR;AACAL,QAAQ,CAACa,KAAD,EAAO,GAAP,CAAR;AACAb,QAAQ,CAACa,KAAD,EAAO,GAAP,CAAR;AACAb,QAAQ,CAACa,KAAD,EAAO,GAAP,CAAR;AACAC,OAAO,CAACC,GAAR,CAAYV,IAAZ;;AACA,IAAMC,EAAE,GAAE,SAAJA,EAAI,CAAAL,IAAI,EAAI;AACda,EAAAA,OAAO,CAACC,GAAR,CAAYd,IAAI,CAACJ,IAAjB;AACH,CAFD;;AAGAO,MAAM,CAACC,IAAD,EAAMC,EAAN,CAAN;AACAG,UAAU,CAACJ,IAAD,EAAMQ,KAAN,CAAV","file":"tree.ee3f47e3.js","sourceRoot":"..\\src","sourcesContent":["let createTree = value =>{\r\n    return {\r\n        data:value,\r\n        children:null,\r\n        parent:null\r\n    };\r\n};\r\n\r\nconst addChild = (node ,value)=>{\r\n    const newNode ={\r\n        data:value,\r\n        children:null,\r\n        parent:node\r\n    }\r\n   node.children = node.children || []//保底\r\n   node.children.push(newNode)\r\n   return newNode\r\n}\r\n\r\nconst travel = (tree,fn)=>{\r\n    fn(tree);\r\n    if(!tree.children)\r\n    {\r\n        return;\r\n    }\r\n    for(let i=0;i<tree.children.length;i++)\r\n    {\r\n        travel(tree.children[i],fn);\r\n    }\r\n}\r\n\r\nconst removeNode = (tree,node) => {\r\n    const sibling = node.parent.children;\r\n    let index = 0;\r\n    for(let i  = 1;i<sibling.length;i++)\r\n    {\r\n        if(sibling[i]===node)\r\n        index = i\r\n    }\r\n    sibling.splice(index,1)\r\n}\r\n\r\nconst tree = createTree(10)\r\naddChild(tree,20)\r\nconst node2=addChild(tree,30)\r\naddChild(tree,40)\r\naddChild(tree,50)\r\naddChild(tree,60)\r\naddChild(node2,201)\r\naddChild(node2,202)\r\naddChild(node2,203)\r\nconsole.log(tree)\r\nconst fn =node => {\r\n    console.log(node.data)\r\n}\r\ntravel(tree,fn)\r\nremoveNode(tree,node2)\r\n\r\n\r\n\r\n"]}